/* $Id: $ */
/*
 * Copyright (c) 2011 Hamburg University of Technology (TUHH).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the Hamburg University of Technology nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * HAMBURG UNIVERSITY OF TECHNOLOGY OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/**
 * @author Christian Renner
 * @date December 14 2011
 */

#include "AM.h"
#include "Serial.h"
#include "Reporting.h"

#include "OrinocoDebugReportingMsg.h"
#include "OrinocoBeaconMsg.h"
#include "DdcForecastMsg.h"

#ifndef SLEEP_DURATION
#  define SLEEP_DURATION 256
#endif

#define FORECAST_LEN         8  // FIXME unused
#define FORECAST_NUM        30  // number of forecasts
#define FORECAST_INTVL  307200  // in ms



module SinkP @safe() {
  uses {
    interface Boot;
    interface Timer<TMilli> as BootTimer;
    interface Timer<TMilli> as DistTimer;

    interface SplitControl as RadioControl;
    interface SplitControl as SerialControl;
    interface StdControl as RoutingControl;
    
    interface RootControl;
   // interface OrinocoRoutingRoot;

    interface OrinocoConfig;
    
    // forecast dissemination
    interface DisseminationUpdate<DdcForecastMsg> as ForecastUpdate;
    interface DisseminationValue<DdcForecastMsg>  as ForecastValue;

    // radio
    interface Packet as RadioPacket;
    interface CollectionPacket;
    interface Receive   as RadioReceive[collection_id_t];
    interface QueueSend as RadioSend[collection_id_t];
    interface PacketDelay<TMilli> as PacketDelayMilli;
    interface Receive as OrinocoStatsReporting;
    interface Receive as OrinocoDebugReporting;
    interface LocalTime<TMilli>;  
    interface Leds;

    // serial line
    interface Packet  as SerialPacket;
    interface Receive as SerialReceive;
    interface AMSend;
  }
}
implementation
{
  uint16_t  version = 0;
  uint8_t seq_Nr= 0;
  bool temp = FALSE;
  bool temp2 = FALSE;
  bool locked = FALSE;
  DdcForecastMsg  fcast;
  message_t packet;



  event void Boot.booted() {

    // set static wake-up interval for orinoco
    call OrinocoConfig.setWakeUpInterval(SLEEP_DURATION); // ms

    // bring the components up
    call RootControl.setRoot();
    call RoutingControl.start();
    call RadioControl.start();
    call SerialControl.start();

    call BootTimer.startOneShot(1024);
    call DistTimer.startPeriodic(FORECAST_INTVL);
    seq_Nr=0;
  }

  event void BootTimer.fired() {
    // we need to delay this because printf is only set up at Boot.booted() and we cannot influence the order of event signalling
#ifdef PRINTF_H
    printf("%lu: %u reset\n", call LocalTime.get(), TOS_NODE_ID);
    printfflush();
#endif
  }
  
  am_addr_t addr = 0;
  event void DistTimer.fired() {
 /* 
    // stop timer, if have we have reached the desired number of forecasts (0 == inf)
    if (FORECAST_NUM != 0 && version >= FORECAST_NUM) {
       call DistTimer.stop();
       return;
    }

    fcast.len = FORECAST_LEN;
    
    // FIXME how do we provide the size in bytes?

    // provide update (and disseminate it)
    call Update.change(&fcast);*/
  }



  event message_t * OrinocoStatsReporting.receive(message_t * msg, void * payload, uint8_t len) {
    //call RadioSend.send[CID_ORINOCO_STATS_REPORT](msg, len);  // packet is copied or rejected
    return msg;
  }

  event message_t * OrinocoDebugReporting.receive(message_t * msg, void * payload, uint8_t len) {
    //call RadioSend.send[CID_ORINOCO_DEBUG_REPORT](msg, len);  // packet is copied or rejected
    
    #ifdef PRINTF_H
    OrinocoDebugReportingMsg * m = (OrinocoDebugReportingMsg *)payload;
    printf("%lu: %u dbg %u %u %u %lu %lu %u %lu %lu %lu %u %lu %u %u\n",
      call LocalTime.get(),    //  1
      TOS_NODE_ID,             //  2
      m->seqno,                //  3
      m->qs.numPacketsDropped, //  4
      m->qs.numDuplicates,     //  5
      m->ps.numTxBeacons,      //  6
      m->ps.numTxAckBeacons,   //  7
      m->ps.numTxBeaconsFail,  //  8
      m->ps.numRxBeacons,      //  9
      m->ps.numIgnoredBeacons, // 10
      m->ps.numTxPackets,      // 11
      m->ps.numTxPacketsFail,  // 12
      m->ps.numRxPackets,      // 13
      m->ps.numTxTimeouts,     // 14
      m->ps.numMetricResets);  // 15
    printfflush();
    #endif
    
    return msg;
  }


  event void RadioControl.startDone(error_t error) {}

  event void RadioControl.stopDone(error_t error) {}
  
  event void SerialControl.startDone(error_t error) {
}

  event void SerialControl.stopDone(error_t error) {
    	call SerialControl.start();  // restart
}

  event void AMSend.sendDone(message_t* bufPtr, error_t error) {
	//increase seqNr
    	if (&packet == bufPtr) {
     		 locked = FALSE;
		 seq_Nr= (seq_Nr+1)% 256;
    	}


  }



  event message_t *
  RadioReceive.receive[collection_id_t type](message_t * msg, void * payload, uint8_t len) {

    #ifdef PRINTF_H
    uint8_t hops = ((orinoco_data_header_t *)(payload + len))->hopCnt;
   /*
    if (type == ORINOCO_AM_CMDCFRM) { // TODO what is CMDCFRM?
      OrinocoCommandAckMsg * p = (OrinocoCommandAckMsg *)payload;
      printf("%lu: %u bf-rx-conf %u %u %u %u %u\n", call LocalTime.get(), TOS_NODE_ID, call CollectionPacket.getOrigin(msg), type, hops, p->version, len);
      printfflush();
    } else {*/
 //     printf("%lu: %u data-rx %u %u %u %u %u\n", call LocalTime.get(), TOS_NODE_ID, call CollectionPacket.getOrigin(msg), type, *((nx_uint16_t *)payload), hops, call //RadioPacket.payloadLength(msg));

      printf("data-rx %u %u %uX\n", call CollectionPacket.getOrigin(msg), type, hops);
      printfflush();
    /*
      if (type != 33) {  // DEBUGGING HACK TO FIND packet corruption bug
        uint8_t * ps = call RadioPacket.getPayload(msg, 0);
        uint8_t * pe = (uint8_t *)payload + len + sizeof(orinoco_data_header_t) + sizeof(orinoco_delay_footer_t);
        printf("%lu: %u XXX %u", call LocalTime.get(), TOS_NODE_ID, len);
        for (; ps < pe; ps++) {
          printf(" %02x", *ps);
        }
        printf("\n");
        printfflush();
      }
    }*/
    #endif
    
    return msg;
  }

  task void ackTask() {
	//send Package of Type ACK
    	if (!locked) {
    		SinkAck* ack;
      		ack = (SinkAck*)call RadioPacket.getPayload(&packet, sizeof(SinkAck));
     		if (ack != NULL) {
      			ack->seqNr = seq_Nr;
      			ack->nodeId = TOS_NODE_ID;
      			if (call AMSend.send(AM_BROADCAST_ADDR, &packet, sizeof(SinkAck)) == SUCCESS) {
				locked = TRUE;
 				if(!temp2){
					call Leds.led1On();
					temp2 = TRUE;
    				}else {
     					call Leds.led1Off();
					temp2 = FALSE;
    				}
      			}
		}
    	}
   }

   event message_t* SerialReceive.receive(message_t* bufPtr, 
				   void* payload, uint8_t len) {
	uint8_t numValues;
	DdcForecastMsg* cc= (DdcForecastMsg*)bufPtr->data;
 	if(!temp){
		call Leds.led2On();
		temp = TRUE;
    	}else {
     		call Leds.led2Off();
		temp = FALSE;
    	}
	//Copy Values vom Received Package to Local Package
	numValues=(cc->header.numDays+1) * (24 / (cc->header.resolution+1));	
	memcpy(&fcast,cc,numValues+4); //numDays,resolution,sunset,sunrise //TODO constant

	//call dissemination change
	call ForecastUpdate.change(&fcast);
	//post ackTask();


    	return bufPtr;
   }

   event void ForecastValue.changed(){
  	// sinks ignore value updates (we probably don't need the interface at all ...)
   }

}  
